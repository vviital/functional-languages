#lang racket

(require readline)
(require readline/rep-start)
(require readline/readline)
(require (lib "defmacro.ss"))
(require scheme/base)

(define isAtom
  (lambda (x)
    (and (not (null? x)) (not (pair? x)) (not (list? x)) (not (syntax? x)))
  )
)

(define isntAtom
  (lambda (x)
    (not (isAtom x))
  )
)

(define getItemsBySelector
 (lambda (x sel)
   (if (null? x)
      '()
      (begin
        (let ((head (car x)) (tail (cdr x))) 
          (if (sel head)
             (append (list head) (getItemsBySelector tail sel))
             (getItemsBySelector tail sel)
          )
      )
      )
   ) 
  )
)

(define-macro merge-macro
  (lambda (synt . other)
    (let ((func (list-ref other 0)) (cmp1 (list-ref other 1)) (cmp2 (list-ref other 2)))
      `(let ((array  (syntax->datum ,synt)))
         (append (,func array ,cmp1) (,func array ,cmp2))
       )
    )
  )
)

(merge-macro (read-syntax) getItemsBySelector isAtom isntAtom)